<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MyBlog</title>
  
  <subtitle>做不一样的咸鱼</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Rainylo.github.io/"/>
  <updated>2018-07-05T06:00:59.957Z</updated>
  <id>http://Rainylo.github.io/</id>
  
  <author>
    <name>Long Zeren</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>魔性机器人</title>
    <link href="http://Rainylo.github.io//posts/undefined/"/>
    <id>http://Rainylo.github.io//posts/undefined/</id>
    <published>2018-07-05T05:48:56.000Z</published>
    <updated>2018-07-05T06:00:59.957Z</updated>
    
    <content type="html"><![CDATA[<h1 id="超级魔性的跳舞机器人，可以拖动"><a href="#超级魔性的跳舞机器人，可以拖动" class="headerlink" title="超级魔性的跳舞机器人，可以拖动"></a>超级魔性的跳舞机器人，可以拖动</h1><p>&lt;!doctype html&gt;</p><html><br><head><br><meta charset="utf-8"><br><title>行走的机器人</title><br>    <style><br>    body, html {<br>    position: absolute;<br>    margin: 0;<br>    padding: 0;<br>    width: 100%;<br>    height: 100%;<br>    overflow: hidden;<br>}<br><br>canvas {<br>    position: absolute;<br>    width: 100%;<br>    height: 100%;<br>    background:#000;<br>    cursor: pointer;<br>}<br>    </style><br></head><br><br><body><br>    <audio src="In-Grid - I'm Folle de Toi - In-Grid, Banks, C..mp3" autoplay></audio><br>     <canvas></canvas><br><!--                   ,--.    ,--.                 ((O ))--((O ))               ,'_`--'____`--'_`.              _:  ____________  :_             | | ||::::::::::|| | |             | | ||::::::::::|| | |             | | ||::::::::::|| | |             |_| |/__________\| |_|               |________________|            __..-'            `-..__         .-| : .----------------. : |-.       ,\ || | |\______________/| | || /.      /`.\:| | ||  __  __  __  || | |;/,'\     :`-._\;.| || '--''--''--' || |,:/_.-':     |    :  | || .----------. || |  :    |     |    |  | || '----SSt---' || |  |    |     |    |  | ||   _   _   _  || |  |    |     :,--.;  | ||  (_) (_) (_) || |  :,--.;     (`-'|)  | ||______________|| |  (|`-')      `--'   | |/______________\| |   `--'             |____________________|              `.________________,'               (_______)(_______)               (_______)(_______)               (_______)(_______)               (_______)(_______)              |        ||        |              '--------''--------'--><br></body><br>    <script><br>    {<br>    class Robot {<br>        constructor(color, light, size, x, y, struct) {<br>            this.x = x;<br>            this.points = [];<br>            this.links = [];<br>            this.frame = 0;<br>            this.dir = 1;<br>            this.size = size;<br>            this.color = Math.round(color);<br>            this.light = light;<br>            // —- 创建点 —-<br>            for (const p of struct.points) {<br>                this.points.push(new Robot.Point(size <em> p.x + x, size </em> p.y + y, p.f));<br>            }<br>            // —- 创建链接 —-<br>            for (const link of struct.links) {<br>                const p0 = this.points[link.p0];<br>                const p1 = this.points[link.p1];<br>                const dx = p0.x - p1.x;<br>                const dy = p0.y - p1.y;<br>                this.links.push(<br>                    new Robot.Link(<br>                        this,<br>                        p0,<br>                        p1,<br>                        Math.sqrt(dx <em> dx + dy </em> dy),<br>                        link.size <em> size / 3,<br>                        link.lum,<br>                        link.force,<br>                        link.disk<br>                    )<br>                );<br>            }<br>        }<br>        update() {<br>            if (++this.frame % 20 === 0) this.dir = -this.dir;<br>            if (<br>                dancerDrag &amp;&amp;<br>                this === dancerDrag &amp;&amp;<br>                this.size &lt; 16 &amp;&amp;<br>                this.frame &gt; 600<br>            ) {<br>                dancerDrag = null;<br>                dancers.push(<br>                    new Robot(<br>                        this.color,<br>                        this.light </em> 1.25,<br>                        this.size <em> 2,<br>                        pointer.x,<br>                        pointer.y - 100 </em> this.size <em> 2,<br>                        struct<br>                    )<br>                );<br>                dancers.sort(function(d0, d1) {<br>                    return d0.size - d1.size;<br>                });<br>            }<br>            // —- 初始化 —-<br>            for (const link of this.links) {<br>                const p0 = link.p0;<br>                const p1 = link.p1;<br>                const dx = p0.x - p1.x;<br>                const dy = p0.y - p1.y;<br>                const dist = Math.sqrt(dx </em> dx + dy <em> dy);<br>                if (dist) {<br>                    const tw = p0.w + p1.w;<br>                    const r1 = p1.w / tw;<br>                    const r0 = p0.w / tw;<br>                    const dz = (link.distance - dist) </em> link.force;<br>                    const sx = dx / dist <em> dz;<br>                    const sy = dy / dist </em> dz;<br>                    p1.x -= sx <em> r0;<br>                    p1.y -= sy </em> r0;<br>                    p0.x += sx <em> r1;<br>                    p0.y += sy </em> r1;<br>                }<br>            }<br>            // —- 初始化点 —-<br>            for (const point of this.points) {<br>                // —- 拖拽事件 —-<br>                if (this === dancerDrag &amp;&amp; point === pointDrag) {<br>                    point.x += (pointer.x - point.x) <em> 0.1;<br>                    point.y += (pointer.y - point.y) </em> 0.1;<br>                }<br>                // —- 跳舞事件 —-<br>                if (this !== dancerDrag) {<br>                    point.fn &amp;&amp; point.fn(16 <em> Math.sqrt(this.size), this.dir);<br>                }<br>                // —- 集合—-<br>                point.vx = point.x - point.px;<br>                point.vy = point.y - point.py;<br>                point.px = point.x;<br>                point.py = point.y;<br>                point.vx </em>= 0.995;<br>                point.vy <em>= 0.995;<br>                point.x += point.vx;<br>                point.y += point.vy + 0.01;<br>            }<br>            // —- 地面 —-<br>            for (const link of this.links) {<br>                const p1 = link.p1;<br>                if (p1.y &gt; canvas.height </em> ground - link.size <em> 0.5) {<br>                    p1.y = canvas.height </em> ground - link.size <em> 0.5;<br>                    p1.x -= p1.vx;<br>                    p1.vx = 0;<br>                    p1.vy = 0;<br>                }<br>            }<br>            // —- 自动居中 —-<br>            this.points[3].x += (this.x - this.points[3].x) </em> 0.001;<br>        }<br>        draw() {<br>            for (const link of this.links) {<br>                if (link.size) {<br>                    const dx = link.p1.x - link.p0.x;<br>                    const dy = link.p1.y - link.p0.y;<br>                    const a = Math.atan2(dy, dx);<br>                    const d = Math.sqrt(dx <em> dx + dy </em> dy);<br>                    // —- 阴影 —-<br>                    ctx.save();<br>                    ctx.translate(link.p0.x + link.size <em> 0.25, link.p0.y + link.size </em> 0.25);<br>                    ctx.rotate(a);<br>                    ctx.drawImage(<br>                        link.shadow,<br>                        -link.size <em> 0.5,<br>                        -link.size </em> 0.5,<br>                        d + link.size,<br>                        link.size<br>                    );<br>                    ctx.restore();<br>                    // —- 滑动 —-<br>                    ctx.save();<br>                    ctx.translate(link.p0.x, link.p0.y);<br>                    ctx.rotate(a);<br>                    ctx.drawImage(<br>                        link.image,<br>                        -link.size <em> 0.5,<br>                        -link.size </em> 0.5,<br>                        d + link.size,<br>                        link.size<br>                    );<br>                    ctx.restore();<br>                }<br>            }<br>        }<br>    }<br>    Robot.Link = class Link {<br>        constructor(parent, p0, p1, dist, size, light, force, disk) {<br>            // —- 缓存 —-<br>            function stroke(color, axis) {<br>                const image = document.createElement(“canvas”);<br>                image.width = dist + size;<br>                image.height = size;<br>                const ict = image.getContext(“2d”);<br>                ict.beginPath();<br>                ict.lineCap = “round”;<br>                ict.lineWidth = size;<br>                ict.strokeStyle = color;<br>                if (disk) {<br>                    ict.arc(size <em> 0.5 + dist, size </em> 0.5, size <em> 0.5, 0, 2 </em> Math.PI);<br>                    ict.fillStyle = color;<br>                    ict.fill();<br>                } else {<br>                    ict.moveTo(size <em> 0.5, size </em> 0.5);<br>                    ict.lineTo(size <em> 0.5 + dist, size </em> 0.5);<br>                    ict.stroke();<br>                }<br>                if (axis) {<br>                    const s = size / 10;<br>                    ict.fillStyle = “#000”;<br>                    ict.fillRect(size <em> 0.5 - s, size </em> 0.5 - s, s <em> 2, s </em> 2);<br>                    ict.fillRect(size <em> 0.5 - s + dist, size </em> 0.5 - s, s <em> 2, s </em> 2);<br>                }<br>                return image;<br>            }<br>            this.p0 = p0;<br>            this.p1 = p1;<br>            this.distance = dist;<br>            this.size = size;<br>            this.light = light || 1.0;<br>            this.force = force || 0.5;<br>            this.image = stroke(<br>                “hsl(“ + parent.color + “ ,30%, “ + parent.light <em> this.light + “%)”,<br>                true<br>            );<br>            this.shadow = stroke(“rgba(0,0,0,0.5)”);<br>        }<br>    };<br>    Robot.Point = class Point {<br>        constructor(x, y, fn, w) {<br>            this.x = x;<br>            this.y = y;<br>            this.w = w || 0.5;<br>            this.fn = fn || null;<br>            this.px = x;<br>            this.py = y;<br>            this.vx = 0.0;<br>            this.vy = 0.0;<br>        }<br>    };<br>    // —- 设置 canvas —-<br>    const canvas = {<br>        init() {<br>            this.elem = document.querySelector(“canvas”);<br>            this.resize();<br>            window.addEventListener(“resize”, () =&gt; this.resize(), false);<br>            return this.elem.getContext(“2d”);<br>        },<br>        resize() {<br>            this.width = this.elem.width = this.elem.offsetWidth;<br>            this.height = this.elem.height = this.elem.offsetHeight;<br>            ground = this.height &gt; 500 ? 0.85 : 1.0;<br>            for (let i = 0; i &lt; dancers.length; i++) {<br>                dancers[i].x = (i + 2) </em> canvas.width / 9;<br>            }<br>        }<br>    };<br>    // —- 设置点 —-<br>    const pointer = {<br>        init(canvas) {<br>            this.x = 0;<br>            this.y = 0;<br>            window.addEventListener(“mousemove”, e =&gt; this.move(e), false);<br>            canvas.elem.addEventListener(“touchmove”, e =&gt; this.move(e), false);<br>            window.addEventListener(“mousedown”, e =&gt; this.down(e), false);<br>            window.addEventListener(“touchstart”, e =&gt; this.down(e), false);<br>            window.addEventListener(“mouseup”, e =&gt; this.up(e), false);<br>            window.addEventListener(“touchend”, e =&gt; this.up(e), false);<br>        },<br>        down(e) {<br>            this.move(e);<br>            for (const dancer of dancers) {<br>                for (const point of dancer.points) {<br>                    const dx = pointer.x - point.x;<br>                    const dy = pointer.y - point.y;<br>                    const d = Math.sqrt(dx <em> dx + dy </em> dy);<br>                    if (d &lt; 60) {<br>                        dancerDrag = dancer;<br>                        pointDrag = point;<br>                        dancer.frame = 0;<br>                    }<br>                }<br>            }<br>        },<br>        up(e) {<br>            dancerDrag = null;<br>        },<br>        move(e) {<br>            let touchMode = e.targetTouches,<br>                pointer;<br>            if (touchMode) {<br>                e.preventDefault();<br>                pointer = touchMode[0];<br>            } else pointer = e;<br>            this.x = pointer.clientX;<br>            this.y = pointer.clientY;<br>        }<br>    };<br>    // —- 初始化 —-<br>    const dancers = [];<br>    let ground = 1.0;<br>    const ctx = canvas.init();<br>    pointer.init(canvas);<br>    let dancerDrag = null;<br>    let pointDrag = null;<br>    // —- 主要循环 —-<br>    const run = () =&gt; {<br>        requestAnimationFrame(run);<br>        ctx.clearRect(0, 0, canvas.width, canvas.height);<br>        ctx.fillStyle = “#222”;<br>        ctx.fillRect(0, 0, canvas.width, canvas.height <em> 0.15);<br>        ctx.fillRect(0, canvas.height </em> 0.85, canvas.width, canvas.height <em> 0.15);<br>        for (const dancer of dancers) {<br>            dancer.update();<br>            dancer.draw();<br>        }<br>    };<br>    // —- 机器人构造 —-<br>    const struct = {<br>        points: [<br>            {<br>                x: 0,<br>                y: -4,<br>                f(s, d) {<br>                    this.y -= 0.01 </em> s;<br>                }<br>            },<br>            {<br>                x: 0,<br>                y: -16,<br>                f(s, d) {<br>                    this.y -= 0.02 <em> s </em> d;<br>                }<br>            },<br>            {<br>                x: 0,<br>                y: 12,<br>                f(s, d) {<br>                    this.y += 0.02 <em> s </em> d;<br>                }<br>            },<br>            { x: -12, y: 0 },<br>            { x: 12, y: 0 },<br>            {<br>                x: -3,<br>                y: 34,<br>                f(s, d) {<br>                    if (d &gt; 0) {<br>                        this.x += 0.01 <em> s;<br>                        this.y -= 0.015 </em> s;<br>                    } else {<br>                        this.y += 0.02 <em> s;<br>                    }<br>                }<br>            },<br>            {<br>                x: 3,<br>                y: 34,<br>                f(s, d) {<br>                    if (d &gt; 0) {<br>                        this.y += 0.02 </em> s;<br>                    } else {<br>                        this.x -= 0.01 <em> s;<br>                        this.y -= 0.015 </em> s;<br>                    }<br>                }<br>            },<br>            {<br>                x: -28,<br>                y: 0,<br>                f(s, d) {<br>                    this.x += this.vx <em> 0.035;<br>                    this.y -= 0.001 </em> s;<br>                }<br>            },<br>            {<br>                x: 28,<br>                y: 0,<br>                f(s, d) {<br>                    this.x += this.vx <em> 0.035;<br>                    this.y -= 0.001 </em> s;<br>                }<br>            },<br>            {<br>                x: -3,<br>                y: 64,<br>                f(s, d) {<br>                    this.y += 0.015 <em> s;<br>                    if (d &gt; 0) {<br>                        this.y -= 0.01 </em> s;<br>                    } else {<br>                        this.y += 0.05 <em> s;<br>                    }<br>                }<br>            },<br>            {<br>                x: 3,<br>                y: 64,<br>                f(s, d) {<br>                    this.y += 0.015 </em> s;<br>                    if (d &gt; 0) {<br>                        this.y += 0.05 <em> s;<br>                    } else {<br>                        this.y -= 0.01 </em> s;<br>                    }<br>                }<br>            }<br>        ],<br>        links: [<br>            { p0: 3, p1: 7, size: 12, lum: 0.5 },<br>            { p0: 1, p1: 3, size: 24, lum: 0.5 },<br>            { p0: 1, p1: 0, size: 60, lum: 0.5, disk: 1 },<br>            { p0: 5, p1: 9, size: 16, lum: 0.5 },<br>            { p0: 2, p1: 5, size: 32, lum: 0.5 },<br>            { p0: 1, p1: 2, size: 50, lum: 1 },<br>            { p0: 6, p1: 10, size: 16, lum: 1.5 },<br>            { p0: 2, p1: 6, size: 32, lum: 1.5 },<br>            { p0: 4, p1: 8, size: 12, lum: 1.5 },<br>            { p0: 1, p1: 4, size: 24, lum: 1.5 }<br>        ]<br>    };<br><br>    for (let i = 0; i &lt; 6; i++) {<br>        dancers.push(<br>            new Robot(<br>                i <em> 360 / 7,<br>                80,<br>                (window.location.href.indexOf(“fullcpgrid”) &gt; -1) ? 3 : 4,<br>                (i + 2) </em> canvas.width / 9,<br>                canvas.height * ground - 300,<br>                struct<br>            )<br>        );<br>    }<br>    run();<br>}<br><br>    </script><br></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;超级魔性的跳舞机器人，可以拖动&quot;&gt;&lt;a href=&quot;#超级魔性的跳舞机器人，可以拖动&quot; class=&quot;headerlink&quot; title=&quot;超级魔性的跳舞机器人，可以拖动&quot;&gt;&lt;/a&gt;超级魔性的跳舞机器人，可以拖动&lt;/h1&gt;&lt;p&gt;&amp;lt;!doctype html&amp;
      
    
    </summary>
    
      <category term="HTML" scheme="http://Rainylo.github.io/categories/HTML/"/>
    
    
      <category term="HTML" scheme="http://Rainylo.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客——不止于文字</title>
    <link href="http://Rainylo.github.io//posts/232c0b30/"/>
    <id>http://Rainylo.github.io//posts/232c0b30/</id>
    <published>2018-04-29T03:08:56.000Z</published>
    <updated>2018-07-05T05:48:44.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在文章中添加图片、音乐及视频"><a href="#在文章中添加图片、音乐及视频" class="headerlink" title="在文章中添加图片、音乐及视频"></a>在文章中添加图片、音乐及视频</h1><a id="more"></a><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=536622304&auto=1&height=66?rel=0&amp;autoplay=1"></iframe><h2 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h2><ol><li><p>首先更改_config.yml 中 post_asset_folder:true。当设置post_asset_folder为true参数后，在建立文件时，Hexo会自动建立一个与文章同名的文件夹，可以把与该文章相关的所有资源都放到这个文件夹，便于对每篇文章里的资源进行管理</p></li><li><p>在搭建的博客目录下打开Git bash ，执行:</p><pre><code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></pre></li><li><p>完成安装后用Hexo新建文章的时候会发现_posts目录下面会多出一个和文章名字一样的文件夹。</p></li><li><p>把图片放在文件夹下面。此时，就可以在文章中添加如下代码格式即可插入图片：    </p><pre><code>![图片描述](文件夹名/图片名称.jpg)</code></pre></li><li><p>也可以在source文件夹中新建images文件夹，把所有图片统一放置在里面（可以删除新建文章时创建的文件夹），使用绝对路径插入图片：</p><pre><code>![图片描述](/img/图片名称.jpg)</code></pre></li><li><p>相对路径和绝对路径两种方法各有好处，根据个人习惯选择。</p></li></ol><hr><h2 id="添加音乐"><a href="#添加音乐" class="headerlink" title="添加音乐"></a>添加音乐</h2><p>比如网易云音乐（网页版），找到喜欢的歌曲，点击生成外链播放器，把里面的代码复制下来，直接粘贴到博文中即可：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/wangyi1.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/wangyi2.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h2 id="添加视频"><a href="#添加视频" class="headerlink" title="添加视频"></a>添加视频</h2><p>将你需要放置的本地视频上传至视频网站，比如哔哩哔哩、优酷、腾讯视频等等，审核通过后，点击分享按钮，复制iframe代码到文章中你指定的位置即可：</p><p>例如哔哩哔哩：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/video.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;在文章中添加图片、音乐及视频&quot;&gt;&lt;a href=&quot;#在文章中添加图片、音乐及视频&quot; class=&quot;headerlink&quot; title=&quot;在文章中添加图片、音乐及视频&quot;&gt;&lt;/a&gt;在文章中添加图片、音乐及视频&lt;/h1&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://Rainylo.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://Rainylo.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客</title>
    <link href="http://Rainylo.github.io//posts/ec7d7221/"/>
    <id>http://Rainylo.github.io//posts/ec7d7221/</id>
    <published>2018-04-27T12:38:04.000Z</published>
    <updated>2018-04-30T06:12:22.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Hexo-Github搭建个人博客"><a href="#使用Hexo-Github搭建个人博客" class="headerlink" title="使用Hexo+Github搭建个人博客"></a>使用Hexo+Github搭建个人博客</h1><a id="more"></a><hr><h2 id="写在教程之前"><a href="#写在教程之前" class="headerlink" title="写在教程之前"></a>写在教程之前</h2><ul><li><p>前两天自己试着使用Hexo搭建了一个博客，也即是你们现在所看到的，搭建过程中出现过很多很多错误，失败重做至少五次，也曾想过放弃，不过我还是头铁挺了过来(还是太笨了233)，期间参照许多教程甚至询问其他博主，才有了现在这个正式版1.0。</p></li><li><p>在此，我衷心的感谢所有给予过我帮助的人！</p></li></ul><hr><h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><ul><li><p>在搭建博客前，需要用到Git和node.js环境，所以需要提前到官网下载好，选择相应的版本，安装过程自行百度参考相关教程即可。</p></li><li><p>在我自己查找教程的过程中，发现由于教程的时间不同，分为许多不同的版本，许多命令也都有差异，而我没有多余时间来特意整理这些命令（或许等以后有时间了我会更新）。因此，我只能厚着脸皮引用一个我个人认为比较好比较全面的教程：</p></li><li><a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">使用Hexo+Github一步步搭建属于自己的博客（基础）</a></li><li><a href="http://www.cnblogs.com/fengxiongZz/p/7707568.html" target="_blank" rel="noopener">使用Hexo+Github一步步搭建属于自己的博客（进阶）</a></li></ul><hr><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ul><li><p>强烈推荐<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo官网</a>，里面有很多解释，不用怕英文看不懂，现在大多浏览器右键里都有翻译选项吧。如果搭建过程中有错误请仔细对比教程或自行百度搜索问题。</p></li><li><p>推荐一下个人认为比较好用的文本编辑器：<a href="https://www.sublimetext.com/" target="_blank" rel="noopener">Sublime</a>，代码阅读起来也舒服。</p></li><li><p>可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo主题</a>更换你的Hexo主题，点击图片可以预览，点击主题名可以跳转到下载链接，跳转后点击绿色按钮Clone or download即可下载，下载之后不要直接关闭下载页面，下滑滚轮，一般主题下面都有主题作者的说明和教程，可以省去很多很多麻烦。</p></li><li><p>如果你有购买域名的话，可以绑定到你已绑定github的博客，用自己的域名来访问，详细可以参考百度教程。</p></li><li><p>使用Hexo搭建的博客发布文章时，需要用到支持Markdown语法的编辑器，推荐使用CSDN提供的编辑器：<br><a href="http://write.blog.csdn.net/mdeditor" target="_blank" rel="noopener">http://write.blog.csdn.net/mdeditor</a></p></li><li><p>Hexo博客还支持许多其他功能，例如gitalk评论功能等，由于我也才入门，所以有需要的自行百度吧。</p></li></ul><h3 id="常用的hexo命令"><a href="#常用的hexo命令" class="headerlink" title="常用的hexo命令"></a>常用的hexo命令</h3><ol><li>hexo clean 清空生成目录（public）</li><li>hexo g 生成网站文件</li><li>hexo s 打开本地服务 localhost:4000</li><li>hexo d 将文件部署到github page</li><li>hexo new xxx 新建一篇文章xxx（文件名不宜太长）</li><li>hexo new page xxx 新建一个页面xxx</li></ol><hr><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><ul><li><p>看到这篇文章中许多链接或百度的字眼，你们可能要吐槽我只会搬运而不会原创了，在此我只能说句实在抱歉，我并不想用我有限的时间来偷工减料地完成一篇很有意义的教程，我自己所学也很有限，我并不想误导大家，所以引用那些比较完善的教程资料。</p></li><li><p>也许有人会说我懒不知道复制粘贴吗？其实，粘贴复制也是考验技术的2333，因为等你接触到Markdown语法就知道了，虽然这语法不难，但也要花些时间。我这样引用也算是尊重一下其他人的劳动成果吧。</p></li><li><p>如有其他问题，欢迎在文章下面留言或者直接私聊我，我会尽力解答。</p></li><li><p>这个是我所使用的主题：<br><a href="https://github.com/tomotoes/hexo-theme-tomotoes" target="_blank" rel="noopener">tomotoes</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用Hexo-Github搭建个人博客&quot;&gt;&lt;a href=&quot;#使用Hexo-Github搭建个人博客&quot; class=&quot;headerlink&quot; title=&quot;使用Hexo+Github搭建个人博客&quot;&gt;&lt;/a&gt;使用Hexo+Github搭建个人博客&lt;/h1&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://Rainylo.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://Rainylo.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>页面点击效果</title>
    <link href="http://Rainylo.github.io//posts/5c2fafc7/"/>
    <id>http://Rainylo.github.io//posts/5c2fafc7/</id>
    <published>2018-04-26T09:58:33.000Z</published>
    <updated>2018-04-30T06:12:24.643Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现页面点击桃心效果"><a href="#实现页面点击桃心效果" class="headerlink" title="实现页面点击桃心效果"></a>实现页面点击桃心效果</h1><h4 id="手机端也有特效哦"><a href="#手机端也有特效哦" class="headerlink" title="手机端也有特效哦"></a>手机端也有特效哦</h4><a id="more"></a><p>点击<a href="http://7u2ss1.com1.z0.glb.clouddn.com/love.js" target="_blank" rel="noopener">love.js</a></p><p>将里面全部代码复制，之后在路径/themes/“主题名”/source/js下新建love.js，将刚才复制的代码粘贴进love.js，打开/themes/“主题名”/layout/script.ejs（不同主题文件名可能不同），打开后在末尾添加以下代码：</p><pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;/js/love.js&quot;&gt;&lt;/script&gt;</code></pre><p>到此，教程差不多就结束了，如果不成功可能是script代码添加位置不对，动手多试试吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;实现页面点击桃心效果&quot;&gt;&lt;a href=&quot;#实现页面点击桃心效果&quot; class=&quot;headerlink&quot; title=&quot;实现页面点击桃心效果&quot;&gt;&lt;/a&gt;实现页面点击桃心效果&lt;/h1&gt;&lt;h4 id=&quot;手机端也有特效哦&quot;&gt;&lt;a href=&quot;#手机端也有特效哦&quot; class=&quot;headerlink&quot; title=&quot;手机端也有特效哦&quot;&gt;&lt;/a&gt;手机端也有特效哦&lt;/h4&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://Rainylo.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://Rainylo.github.io/tags/Hexo/"/>
    
      <category term="页面美化" scheme="http://Rainylo.github.io/tags/%E9%A1%B5%E9%9D%A2%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
</feed>
